<template>
  <el-tabs
    v-model="modbusStore.activeTabId"
    type="border-card"
    class="main-tabs"
    editable
    @tab-add="modbusStore.openNewTab"
    @tab-remove="modbusStore.closeTab"
  >
    <!-- <el-tab-pane
      v-for="link of links"
      :key="link.routeName"
      :name="link.routeName"
      :label="link.name"
    >
      <template #label>
        <el-icon style="margin-right: 5px">
          <component :is="link.icon" />
        </el-icon>
        <span>{{ link.name }}</span>
      </template>
    </el-tab-pane> -->
    <el-tab-pane
      v-for="tab in modbusStore.tabs"
      :key="tab.id"
      :name="tab.id"
      :label="tab.name"
    >
      <template #label>
        <el-icon style="margin-right: 5px">
          <component :is="iconForTab(tab.component)" />
        </el-icon>
        <span>{{ tab.name }}</span>
      </template>
      <component :is="componentForTab(tab.component)" />
    </el-tab-pane>
    <!-- <Suspense>
      <router-view
        v-if="!loading"
        v-slot="{Component}"
      >
        <keep-alive>
          <component :is="Component" />
        </keep-alive>
      </router-view>
    </Suspense> -->
  </el-tabs>
  <!-- <el-container>
    <el-header>
      <img
        height="45"
        :src="logo"
      />
    </el-header>
    <el-container>
      <el-aside width="230px">
        <el-card header="Navigation">
          <el-menu
            class="el-menu-vertical-demo"
            :router="true"
            :default-active="$route.name?.toString()"
          >
            <el-menu-item
              v-for="link of links"
              :key="link.routeName"
              :index="link.routeName"
            >
              <el-icon>
                <component :is="link.icon" />
              </el-icon>
              <span>{{ link.name }}</span>
            </el-menu-item>
          </el-menu>
        </el-card>
      </el-aside>
      <el-container>
        <el-main>
          <el-scrollbar>
            <Suspense>
              <router-view
                v-if="!loading"
                v-slot="{Component, route}"
              >
                <Transition
                  name="el-fade-in-linear"
                  appear
                  mode="out-in"
                >
                  <div :key="route.name || 'undefined'">
                    <keep-alive>
                      <component :is="Component" />
                    </keep-alive>
                  </div>
                </Transition>
              </router-view>
            </Suspense>
          </el-scrollbar>
        </el-main>
      </el-container>
    </el-container>
  </el-container> -->
</template>

<script lang="ts" setup>
import {network} from '#preload';
// import router from './router';
// import logo from '../assets/Modbus Tool X.svg';
import {useModbusStore} from '/@/stores/useModbus';

import ModbusClient from '/@/views/ModbusClient.vue';
import ModbusServer from '/@/views/ModbusServer.vue';
import ModbusLogger from '/@/views/ModbusLogger.vue';
import ModbusScanner from '/@/views/ModbusScanner.vue';
import ModbusAnalyzer from '/@/views/ModbusAnalyzer.vue';
import DanfossExplorer from '/@/views/DanfossExplorer.vue';
import RegisterScanner from '/@/views/RegisterScanner.vue';
import NewTab from '/@/views/NewTab.vue';

function componentForTab(componentName: string) {
  switch (componentName) {
    case 'ModbusClient':
      return ModbusClient;
    case 'ModbusServer':
      return ModbusServer;
    case 'ModbusLogger':
      return ModbusLogger;
    case 'ModbusScanner':
      return ModbusScanner;
    case 'ModbusAnalyzer':
      return ModbusAnalyzer;
    case 'DanfossExplorer':
      return DanfossExplorer;
    case 'RegisterScanner':
      return RegisterScanner;
    default:
      return NewTab;
  }
}

function iconForTab(componentName: string) {
  switch (componentName) {
    case 'ModbusClient':
      return IconEpMouse;
    case 'ModbusServer':
      return IconEpCpu;
    case 'ModbusLogger':
      return IconEpSearch;
    case 'ModbusScanner':
      return IconEpSearch;
    case 'ModbusAnalyzer':
      return IconEpDataAnalysis;
    case 'DanfossExplorer':
      return IconEpDataAnalysis;
    case 'RegisterScanner':
      return IconEpSearch;
    default:
      return IconEpPlus;
  }
}

const loading = ref(true);

const modbusStore = useModbusStore();

onMounted(() => {
  window.addEventListener('keydown', event => {
    // Filter out events that are not ctrl+T or ctrl+W
    if (!event.ctrlKey) return;

    if (event.code === 'KeyT') {
      return modbusStore.openNewTab();
    }

    if (event.code === 'KeyW') {
      return modbusStore.closeTab();
    }
  });

  document.querySelector('.el-tabs__nav-scroll')?.addEventListener('dblclick', event => {
    // Filter out events that are triggered by clicking something else than the background
    if (event.target !== event.currentTarget) return;
    modbusStore.openNewTab();
  });

  document.querySelector('.el-tabs__nav-scroll')?.addEventListener('mouseup', (event: unknown) => {
    const ev = event as MouseEvent;
    // Filter out events that are not middle-clicks
    if (ev.button !== 1) return;

    // Find parent element with class el-tabs__item
    const targetElement = ev.target as HTMLElement;
    const tabElement = targetElement.closest('.el-tabs__item');
    if (!tabElement) return;

    // Remove leading part of id (tab-)
    const tabId = parseInt(tabElement.id.substring(4));

    // Close tab
    modbusStore.closeTab(tabId);
  });
});

network.onInfo((_event, netInfo) => {
  modbusStore.networkInfo = netInfo;
  loading.value = false;
});

network.getInfo();
</script>

<style lang="scss">
@import url('./style/index.scss');
</style>
